swagger: "2.0"
info:
  title: Smart plants API documentation
  description: Smart plants public API implementation and documentation
  version: 1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000

tags:
  - name: User
    description: All tasks regarding a user
  - name: Plants
    description: All tasks regarding plants
  - name: Sensors
    description: All tasks regarding sensors


paths:
  /user/{username}:
    get:
      tags:
      - User
      summary: Return user data
      description: This route will return a JSON object identifying the user that requested it, except for the password field. If the user doesn't exist, it will return a NOT_FOUND error message
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user
      responses:
        '200':
          description: A JSON object will the user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNoPassword"
        '404':
          description: A NOT_FOUND error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NOT_FOUND"
              example:
                {
                  "type": "NOT_FOUND",
                  "message": "User not found"
                }
    put:
      tags:
      - User
      summary: Add a new plant to a user
      description: This route will return an OK message if it was added successfully, a NOT_FOUND error message if the user doesn't exist, or a CONFLICT error message if the plant is already registered with that user
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: The username of the user
      requestBody:
        description: The data needed to construct a new plant object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: the name of the plant
                  example: Basel
                description:
                  type: string
                  description: A short description of the plant
                  example: Basel plant in the kitchen
                sensor:
                  type: array
                  description: An array of sensor readings
                  items:
                    $ref: "#/components/schemas/Sensor"
              required:
                - name
      responses:
        200:
          description: An OK message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                {
                  "type": "OK",
                  "message": "Plant added"
                }
          
        404:
          description: A NOT_FOUND error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NOT_FOUND"
              example:
                {
                  "type": "NOT_FOUND",
                  "message": "User not found"
                }
        409:
          description: A CONFLICT error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CONFLICT"
              example:
                {
                  "type": "CONFLICT",
                  "message": "Plant  already exists"
                }
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      description: This route will return an OK message if it was added successfully  or a CONFLICT error message if the user already exists
      requestBody:
        description: The data needed to construct a new user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                  example: cristian
                password:
                  type: string
                  description: The password of the user. It will be hashed before adding it to the database
                  example: cristian
                plants:
                  type: array
                  description: An array of plants
                  items:
                    $ref: "#/components/schemas/Plant"
              required:
                - username
                - password
      responses:
        '201':
          description: An OK message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OK"
              example:
                {
                  "type": "OK",
                  "message": "User created"
                }
        '409':
          description: A CONFLICT error message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CONFLICT"
              example:
                {
                  "type": "CONFLICT",
                  "message": "User already exists"
                }
      
components:
  schemas:
    UserNoPassword:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: cristian
        plants:
          type: array
          description: The owned plants
          items:
            $ref: '#/components/schemas/Plant'
      required:
        - username
        - password
    User:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: cristian
        password:
          type: string
          description: The password of the user. It will be hashed
          example: cristian
        plants:
          type: array
          description: The owned plants
          items:
            $ref: '#/components/schemas/Plant'
      required:
        - username
        - password
    Sensor:
      type: object
      properties:
        airTemeperature:
          type: float
          description: The temperature around the plant
          example: 24.2
        airHumidity:
          type: float
          description: The humidity of the air around the plant
          example: 85
        soilMoisture:
          type: float
          description: The humidity of the soil where the plant is placed
          example: 44.45
        lightIntensity:
          type: float
          description: The amount of light that shines into the plant
          example: 90
      required:
        - airTemeperature
        - airHumidity
        - soilMoisture
        - lightIntensity
    Plant:
      type: object
      properties:
        name:
          type: string
          description: The name of the plant
          example: Basel
        description:
          type: string
          description: A short description describing the plant
          example: Basel plant in the kitchen
        sensor:
          type: array
          description: An array of sensor readings
          items:
            $ref: '#/components/schemas/Sensor'
      required:
        - name
    MessageType:
      type: string
      enum: [OK, NOT_FOUND, CONFLICT]
      example: NOT_FOUND
    NOT_FOUND:
      type: object
      properties:
        type:
          description: The message type
          $ref: "#/components/schemas/MessageType"
          example: NOT_FOUND
        message:
          description: The error message
          type: string
          example: The resource is not found
    OK:
      type: object
      properties:
        type:
          description: The message type
          $ref: "#/components/schemas/MessageType"
          example: OK
        message:
          description: The message
          type: string
          example: Resource added
    CONFLICT:
      type: object
      properties:
        type:
          description: The message type
          $ref: "#/components/schemas/MessageType"
          example: CONFLICT
        message:
          description: The message
          type: string
          example: The resource already exists
  
